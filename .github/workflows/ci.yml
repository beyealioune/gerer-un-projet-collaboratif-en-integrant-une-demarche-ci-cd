name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  frontendTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Utiliser Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Installer les dépendances Front-end
        run: npm install
        working-directory: ./front

      - name: Installer Angular CLI Globalement
        run: npm install -g @angular/cli
        working-directory: ./front

      - name: Exécuter les tests Front-end
        run: ng test --code-coverage --watch=false || true
        working-directory: ./front

      - name: Lister le répertoire de couverture
        run: |
          echo "Listing coverage directory:"
          ls -R ./front/coverage || echo "Coverage directory does not exist"
        working-directory: ./front

      - name: Télécharger le rapport Karma
        uses: actions/upload-artifact@v4
        with:
          name: karma-report
          path: ./front/coverage

  backendTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configurer JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          architecture: x64

      - name: Construire avec Maven
        run: mvn -B package --file ./pom.xml
        working-directory: ./back

      - name: Tester avec Maven
        run: mvn -B clean test
        working-directory: ./back

      - name: Télécharger le rapport Jacoco
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: ./back/target/site/jacoco

  dockerBuildAndTest:
    runs-on: ubuntu-latest
    needs: [frontendTests, backendTests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Connexion à Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configurer Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Construire et Tester le Back-end
        run: |
          docker build -t backend-image:latest ./back
          docker run --rm backend-image:latest mvn -B clean test
        continue-on-error: false

      - name: Construire et Tester le Front-end
        run: |
          docker build -t frontend-image:latest ./front
          docker run --rm frontend-image:latest ng test --code-coverage --watch=false
        continue-on-error: false

      - name: Pousser les images Docker
        if: success() # Pousser uniquement si les tests passent
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest

      - name: Pousser les images Docker Front-end
        if: success() # Pousser uniquement si les tests passent
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bobapp-front:latest
