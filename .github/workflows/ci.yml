name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  frontendTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Use Node.js 20.x
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install Front-end Dependencies
        run: npm install
        working-directory: ./front

      - name: Install Angular CLI Globally
        run: npm install -g @angular/cli
        working-directory: ./front

      - name: Run Front-end Tests
        run: ng test --code-coverage --watch=false || true
        working-directory: ./front

      - name: List Coverage Directory
        run: |
          echo "Listing coverage directory:"
          ls -R ./front/coverage || echo "Coverage directory does not exist"
        working-directory: ./front

      - name: Upload Karma Report
        uses: actions/upload-artifact@v4
        with:
          name: karma-report
          path: ./front/coverage

  backendTests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Build with Maven
        run: mvn -B package --file ./pom.xml
        working-directory: ./back

      - name: Test with Maven
        run: mvn -B clean test
        working-directory: ./back

      - name: Upload Jacoco Report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: ./back/target/site/jacoco

  sonarqube:
    runs-on: ubuntu-latest
    needs: [frontendTests, backendTests]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          architecture: x64

      - name: Run SonarCloud Scan
        run: |
          echo "Running SonarCloud Scan for Backend..."
          mvn clean verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=beyealioune1_beyealioune \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          echo "SonarCloud Scan for Backend completed."
        working-directory: ./back

  build:
    runs-on: ubuntu-latest
    needs: [frontendTests, backendTests, sonarqube]
    if: ${{ needs.frontendTests.result == 'success' && needs.backendTests.result == 'success' && needs.sonarqube.result == 'success' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Back-end
        uses: docker/build-push-action@v5
        with:
          context: ./back
          file: ./back/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bobapp-back:latest

      - name: Build and Push Front-end
        uses: docker/build-push-action@v5
        with:
          context: ./front
          file: ./front/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/bobapp-front:latest

  testInContainers:
    runs-on: ubuntu-latest
    needs: [build]
    if: ${{ needs.build.result == 'success' }}
    steps:
      - name: Run Front-end Tests in Docker
        run: |
          docker run --rm -v $(pwd)/front:/app -w /app node:20 bash -c "npm install && npm install -g @angular/cli && ng test --code-coverage --watch=false || true"

      - name: Run Back-end Tests in Docker
        run: |
          docker run --rm -v $(pwd)/back:/app -w /app maven:3.9.2-eclipse-temurin-17 bash -c "mvn clean verify"
 
